{"version":3,"sources":["Components/CurrencyConverter.jsx","Components/KeyMapper.jsx","Components/WorkflowBoard/LaneModal.jsx","Components/WorkflowBoard/CardModal.jsx","Components/WorkflowBoard/WorkflowCard.jsx","Components/WorkflowBoard/WorkflowLane.jsx","Components/WorkflowBoard/WorkflowBoard.jsx","Components/Redux/store.js","Components/Redux/reducers.js","Components/Projects.jsx","images/world-with-rings.svg","App.js","reportWebVitals.js","index.js"],"names":["CurrencyConverter","props","state","currencies","currencyFrom","currencyTo","amountFrom","amountTo","handleSelect","bind","updateAmount","Axios","get","then","response","setState","rates","data","baseCurrency","base","Object","keys","sort","fromRate","this","baseValue","toFixed","conversion","event","target","name","value","convertCurrency","className","onChange","map","index","type","step","Component","KeyMapper","document","onkeydown","keyDown","preventDefault","keyPress","code","keyCode","React","LaneModal","initialValues","laneValues","onSubmit","values","updateLaneValues","handleClose","formik","isOpen","onClick","resetForm","id","CardModal","modal","cardValues","updateCardValues","as","WorkflowCard","handleUpdateCardValues","newCard","card","title","content","updateCard","handleModalOpen","showEditModal","handleModalClose","handleCardDelete","deleteCard","laneId","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","aria-label","connect","dispatch","updatedCard","cardId","WorkflowLane","handleTitleChange","newLane","lane","updateLane","handleAddCard","showCardModal","handleCardModalClose","addNewCard","handleEditLane","showLaneModal","handleLaneModalClose","handleUpdateLaneValues","handleDeleteLane","deleteLane","href","aria-hidden","droppableId","droppableProps","cards","placeholder","updatedLane","WorkflowBoard","onDragEnd","result","destination","source","startLane","lanes","endLane","newCardIds","Array","from","cardIds","splice","newState","updateState","startLaneIds","newStartLane","endLaneIds","newEndLane","newLaneOrder","laneOrder","handleAddLane","showNewLaneModal","handleNewLaneModalClose","addNewLane","direction","store","createStore","action","undefined","deepCopyState","originalState","lodash","uuidv4","push","indexOf","createNewLane","laneIndex","Projects","handleCurrencyCalulator","currencyCalculator","keyMapper","workFlowBoard","handleKeyMapper","handleWorkFlowBoard","displayActiveProject","App","src","globe","alt","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c24562e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\n\r\nexport default class CurrencyConverter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            currencies: [\"AUD\"],\r\n            currencyFrom: \"AUD\",\r\n            currencyTo: \"AUD\",\r\n            amountFrom: 0,\r\n            amountTo: 0\r\n        }\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n        this.updateAmount = this.updateAmount.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        //get exchange rates on load and store\r\n        let apiAddress = \"https://api.exchangeratesapi.io/latest\";\r\n        let requestAddress = apiAddress;\r\n        Axios.get(requestAddress).then((response) => {\r\n            this.setState({\r\n                rates: response.data.rates,\r\n                baseCurrency: response.data.base,\r\n                currencies: Object.keys(response.data.rates).sort()\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    convertCurrency() {\r\n\r\n        let fromRate = this.state.rates[this.state.currencyFrom];\r\n        let baseValue =  this.state.amountFrom / fromRate;\r\n        if (this.state.currencyTo === this.state.baseCurrency){\r\n            this.setState({ amountTo: baseValue.toFixed(3) })\r\n        }\r\n        else{\r\n            let toRate = this.state.rates[this.state.currencyTo];\r\n            let conversion = baseValue * toRate;\r\n            this.setState({ amountTo: conversion.toFixed(3) })\r\n        }\r\n        \r\n    }\r\n\r\n    handleSelect(event) {\r\n        this.setState({ [event.target.name]: event.target.value }, this.convertCurrency);\r\n    }\r\n\r\n    updateAmount(event){\r\n        this.setState({amountFrom: event.target.value}, this.convertCurrency)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n                <div className=\"small-widget-container\">\r\n                    \r\n                        <div className=\"field\">\r\n                            <label>Select current currency</label>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <div className=\"control\">\r\n                                <div className=\"select\">\r\n                                    <select  name=\"currencyFrom\" value={this.state.currencyFrom} onChange={this.handleSelect}>\r\n                                        {this.state.currencies.map((name, index) => {\r\n                                            return <option key={index} value={name} >{name}</option>\r\n                                        })}\r\n                                    </select>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label>Amount</label>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"number\" name=\"amountFrom\" step=\"any\" value={this.state.amountFrom} onChange={this.updateAmount}/>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label>Select target currency</label>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <div className=\"control\">\r\n                                <div className=\"select\">\r\n                                    <select  name=\"currencyTo\" value={this.state.currencyTo} onChange={this.handleSelect}>\r\n                                        {this.state.currencies.map((name, index) => {\r\n                                            return <option key={index} value={name} >{name}</option>\r\n                                        })}\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <label>Converted Amount:</label> <br />\r\n                        <p>$ {this.state.amountTo}</p>\r\n                    \r\n                </div>\r\n            \r\n        );\r\n    }\r\n}","import React from 'react'\r\n\r\n\r\nexport default class KeyMapper extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.onkeydown = (keyDown) => {\r\n            \r\n            keyDown.preventDefault()\r\n            this.setState({\r\n                keyPress: keyDown.code,\r\n                keyCode: keyDown.keyCode\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"small-widget-container has-text-centered\">\r\n                    <h3>Press a Key</h3>\r\n                    <table className=\"table\">\r\n                        <tr>\r\n                            <td>KeyPress</td>\r\n                            <td>{this.state.keyPress}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>KeyCode</td>\r\n                            <td>{this.state.keyCode}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Formik, Field, Form, useFormik } from 'formik';\r\n\r\nexport default class LaneModal extends React.Component{\r\n    \r\n    render(){\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={this.props.laneValues}\r\n                onSubmit={(values) => {\r\n                    this.props.updateLaneValues(values);\r\n                    this.props.handleClose();\r\n                    }\r\n                }\r\n            >\r\n            {(formik) => (\r\n                <div className={`modal ${this.props.isOpen ? \"is-active\" : \"\"}`}>\r\n                    <div className=\"modal-background\" \r\n                    onClick={(event) => {\r\n                        event.preventDefault()\r\n                        formik.resetForm()\r\n                        this.props.handleClose();}}></div>\r\n                    <div className=\"modal-card\">\r\n                        <header className=\"modal-card-head\">\r\n                            <p className=\"modal-card-title\">Edit Lane</p>\r\n                        </header>\r\n                        <Form>\r\n                            <section className=\"modal-card-body\">\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\">Title</label>\r\n                                    <div className=\"control\">\r\n                                        <Field className=\"input\" id='title' type='text' name='title'/>\r\n                                    </div>\r\n                                </div>\r\n                            </section>\r\n                            <footer className=\"modal-card-foot\">\r\n                                <button type=\"submit\" className=\"button is-success\">Save changes</button>\r\n                                <button className=\"button\" onClick={(event) => {\r\n                                    event.preventDefault()\r\n                                    formik.resetForm()\r\n                                    this.props.handleClose();\r\n                                }}>Cancel</button>\r\n                            </footer>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n             )}\r\n            </Formik>\r\n\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { Formik, Field, Form } from 'formik';\r\n\r\nexport default class CardModal extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            modal: false\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Formik\r\n                initialValues={this.props.cardValues}\r\n                onSubmit={(values) => {\r\n                    this.props.updateCardValues(values);\r\n                    this.props.handleClose();\r\n                    }\r\n                }\r\n            >\r\n            {(formik) => (\r\n                <div className={`modal ${this.props.isOpen ? \"is-active\" : \"\"}`}>\r\n                    <div className=\"modal-background\" onClick={(event) => {\r\n                                    event.preventDefault()\r\n                                    formik.resetForm()\r\n                                    this.props.handleClose();\r\n                                }}></div>\r\n                    <div className=\"modal-card\">\r\n                        <header className=\"modal-card-head\">\r\n                            <p className=\"modal-card-title\">Edit Card</p>\r\n                        </header>\r\n                    \r\n                        \r\n                        <Form>\r\n                            <section className=\"modal-card-body\">\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\">Title</label>\r\n                                    <div className=\"control\">\r\n                                        <Field className=\"input\" id='title' type='text' name='title'/>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\">Content</label>\r\n                                    <div className=\"control\">\r\n                                        <Field className=\"input\" id='content' as='textarea' name='content' />\r\n                                    </div>\r\n                                </div>\r\n                                    \r\n                            </section>\r\n                            <footer className=\"modal-card-foot\">\r\n                                <button type=\"submit\" className=\"button is-success\">Save changes</button>\r\n                                <button className=\"button\" onClick={(event) => {\r\n                                    event.preventDefault()\r\n                                    formik.resetForm()\r\n                                    this.props.handleClose();\r\n                                }}>Cancel</button>\r\n                            </footer>\r\n                            </Form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            </Formik>\r\n\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {Draggable, DraggableStateSnapshot, DraggableProvided} from 'react-beautiful-dnd';\r\nimport CardModal from './CardModal';\r\nimport { connect } from 'react-redux';\r\n\r\nclass WorkflowCard extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            showEditModal: false\r\n        }\r\n    }\r\n\r\n    handleUpdateCardValues = (values) => {\r\n        var newCard = {\r\n            ...this.props.card,\r\n            title: values.title,\r\n            content: values.content\r\n        }\r\n        this.props.updateCard(newCard)\r\n    }\r\n    handleModalOpen = () => {\r\n        this.setState({\r\n            showEditModal: true\r\n        });\r\n    }\r\n    handleModalClose = () => {\r\n        this.setState({\r\n            showEditModal: false\r\n        });\r\n    }\r\n    handleCardDelete = () => {\r\n        this.props.deleteCard(this.props.card.id, this.props.laneId)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <>\r\n                <Draggable\r\n                    draggableId={this.props.card.id} \r\n                    index={this.props.index}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <div className=\"mt-4\"\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                        >\r\n                            <article className=\"message\">\r\n                                <div className=\"message-header\">\r\n                                    <p>{this.props.card.title}</p>\r\n                                    <button className=\"delete\" aria-label=\"delete\" onClick={this.handleCardDelete}></button>\r\n                                </div>\r\n                                <div className=\"message-body\">\r\n                                    <p>{this.props.card.content}</p>\r\n                                    <button className=\"button is-small\" onClick={this.handleModalOpen}>Edit</button>\r\n                                </div>\r\n                            </article>\r\n                        </div>\r\n                    )}\r\n                \r\n                </Draggable>\r\n                <CardModal\r\n                    isOpen={this.state.showEditModal}\r\n                    handleClose={this.handleModalClose}\r\n                    cardValues={{ title: this.props.card.title, content: this.props.card.content }}\r\n                    updateCardValues={this.handleUpdateCardValues}\r\n                />\r\n             </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateCard: (updatedCard) => dispatch({ type: 'UPDATE_CARD', updatedCard }),\r\n        deleteCard: (cardId, laneId) => dispatch({ type: 'DELETE_CARD', cardId, laneId})\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(WorkflowCard);","import React from 'react'\r\nimport { Droppable,  Draggable } from 'react-beautiful-dnd';\r\nimport LaneModal from './LaneModal';\r\nimport CardModal from './CardModal';\r\nimport WorkflowCard from './WorkflowCard';\r\nimport { connect } from 'react-redux';\r\n\r\nclass WorkflowLane extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            showCardModal: false,\r\n            showLaneModal: false\r\n        }\r\n    }\r\n\r\n    handleTitleChange = (event) => {\r\n        var newLane = {\r\n            ...this.props.lane,\r\n            ['title']: event.target.value\r\n        }\r\n        this.props.updateLane(newLane)\r\n    }\r\n\r\n    handleAddCard = () => {\r\n        this.setState({\r\n            showCardModal: true\r\n        });\r\n    }\r\n\r\n    handleCardModalClose = () => {\r\n        this.setState({\r\n            showCardModal: false\r\n        });\r\n    }\r\n    handleUpdateCardValues = (values) => {\r\n        this.props.addNewCard(this.props.lane.id, values);\r\n    }\r\n    handleEditLane = () => {\r\n        this.setState({\r\n            showLaneModal: true\r\n        });\r\n    }\r\n    handleLaneModalClose = () => {\r\n\r\n        this.setState({\r\n            showLaneModal: false\r\n        });\r\n\r\n    }\r\n    handleUpdateLaneValues = (values) => {\r\n        var newLane = {\r\n            ...this.props.lane,\r\n            title: values.title\r\n        }\r\n        this.props.updateLane(newLane)\r\n    }\r\n\r\n    handleDeleteLane = () => {\r\n        this.props.deleteLane(this.props.lane.id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            \r\n                <Draggable\r\n                    draggableId={this.props.lane.id}\r\n                    index={this.props.index}\r\n                >\r\n                    {(provided) => (\r\n                        <div className=\"card workflow-lane\"\r\n                            {...provided.draggableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            <header className=\"card-header\" {...provided.dragHandleProps}>\r\n                                \r\n                                <h3 className=\"card-header-title\">{this.props.lane.title}</h3>\r\n                                <a href=\"#\" className=\"card-header-icon\" onClick={this.handleDeleteLane}>\r\n                                    <span className=\"icon\">\r\n                                        <i className=\"delete\" aria-hidden=\"true\"></i>\r\n                                    </span>\r\n                                </a>\r\n                                \r\n                            </header>\r\n                            \r\n                            \r\n                            <Droppable\r\n                                droppableId={this.props.lane.id}\r\n                                type=\"card\"\r\n                            >\r\n                                {(provided, snapshot) => (\r\n                                    <>\r\n                                        <div className=\"cardList\"\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.droppableProps}\r\n                                        >\r\n\r\n                                            {this.props.cards.map((card, index) => <WorkflowCard key={card.id} card={card} index={index} laneId={this.props.lane.id}/>)}\r\n                                            {provided.placeholder}\r\n                                        </div>\r\n                                        <footer className=\"card-footer\">\r\n                                            <a href=\"#\" className=\"card-footer-item\"onClick={this.handleAddCard}>Add Card</a>\r\n                                            <a href=\"#\" className=\"card-footer-item\" onClick={this.handleEditLane}>Edit</a>\r\n                                        </footer>\r\n                                    </>\r\n                                )}\r\n\r\n                            </Droppable>\r\n                        </div>\r\n                        )\r\n                    }\r\n                </Draggable>\r\n                <CardModal\r\n                    isOpen={this.state.showCardModal}\r\n                    handleClose={this.handleCardModalClose}\r\n                    cardValues={{ title: '', content: '' }}\r\n                    updateCardValues={this.handleUpdateCardValues}\r\n                />\r\n                <LaneModal\r\n                    isOpen={this.state.showLaneModal}\r\n                    handleClose={this.handleLaneModalClose}\r\n                    laneValues={{ title: this.props.lane.title}}\r\n                    updateLaneValues={this.handleUpdateLaneValues}\r\n                />\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateLane: (updatedLane) => dispatch({ type: 'UPDATE_LANE', updatedLane}),\r\n        addNewCard: (laneId, values) => dispatch({ type: 'ADD_NEW_CARD', laneId, values}),\r\n        deleteLane: (laneId) => dispatch({ type: 'DELETE_LANE', laneId})\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(WorkflowLane);","import * as React from 'react';\r\nimport WorkflowLane from './WorkflowLane';\r\nimport LaneModal from './LaneModal';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { connect } from 'react-redux';\r\n\r\nclass WorkflowBoard extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showNewLaneModal: false\r\n        }\r\n    }\r\n    onDragEnd = (result) => {\r\n        const { destination, source, draggableId, type } = result;\r\n        if (!destination) {\r\n            return;\r\n        }\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        }\r\n\r\n        if (type === 'lane') {\r\n            const newLaneOrder = Array.from(this.props.laneOrder);\r\n            newLaneOrder.splice(source.index, 1);\r\n            newLaneOrder.splice(destination.index, 0, draggableId);\r\n\r\n            const newState = {\r\n                ...this.props,\r\n                laneOrder: newLaneOrder\r\n            };\r\n            this.props.updateState(newState)\r\n            return\r\n        }\r\n        \r\n        const startLane = this.props.lanes[source.droppableId];\r\n        const endLane = this.props.lanes[destination.droppableId]\r\n\r\n        if (startLane === endLane) {\r\n            //moving in the same lane\r\n            const newCardIds = Array.from(startLane.cardIds);\r\n            newCardIds.splice(source.index, 1);\r\n            newCardIds.splice(destination.index, 0, draggableId);\r\n\r\n            const newLane = {\r\n                ...startLane,\r\n                cardIds: newCardIds\r\n            };\r\n            const newState = {\r\n                ...this.props,\r\n                lanes: {\r\n                    ...this.props.lanes,\r\n                    [newLane.id]: newLane\r\n                }\r\n            };\r\n            this.props.updateState(newState);\r\n            //call server here\r\n        }\r\n        else {\r\n            //moving between lanes\r\n            const startLaneIds = Array.from(startLane.cardIds)\r\n            startLaneIds.splice(source.index, 1);\r\n            const newStartLane = {\r\n                ...startLane,\r\n                cardIds: startLaneIds\r\n            };\r\n\r\n            const endLaneIds = Array.from(endLane.cardIds);\r\n            endLaneIds.splice(destination.index, 0, draggableId);\r\n            const newEndLane = {\r\n                ...endLane,\r\n                cardIds: endLaneIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.props,\r\n                lanes: {\r\n                    ...this.props.lanes,\r\n                    [newStartLane.id]: newStartLane,\r\n                    [newEndLane.id]: newEndLane\r\n                }\r\n            };\r\n            this.props.updateState(newState);\r\n            //call server here\r\n        };\r\n        \r\n    }\r\n    handleAddLane = () => {\r\n        this.setState({\r\n            showNewLaneModal: true\r\n        });\r\n    }\r\n    handleNewLaneModalClose = (event) => {\r\n        this.setState({\r\n            showNewLaneModal: false\r\n        });\r\n    }\r\n    addNewLane = (values) => {\r\n        this.props.addNewLane(values);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"workflow-board-container\">\r\n\r\n                <DragDropContext\r\n                    onDragEnd={this.onDragEnd}\r\n                >\r\n                    <Droppable\r\n                        droppableId=\"all-lanes\"\r\n                        direction=\"horizontal\"\r\n                        type=\"lane\"\r\n                    >\r\n                        {(provided) => (\r\n                            <div className=\"columns\"\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                            >\r\n                                {this.props.laneOrder.map((laneId, index) => {\r\n                                    const lane = this.props.lanes[laneId];\r\n                                    const cards = lane.cardIds.map((cardId) => this.props.cards[cardId])\r\n\r\n                                    return <WorkflowLane key={laneId} lane={lane} cards={cards} index={index}/>\r\n                                })}\r\n                                {provided.placeholder}\r\n                                <button className=\"button is-small is-light\" onClick={this.handleAddLane}>Add Lane</button>\r\n                            </div>\r\n                        )}\r\n                         \r\n                    </Droppable>\r\n                </DragDropContext>\r\n                <LaneModal\r\n                    isOpen={this.state.showNewLaneModal}\r\n                    handleClose={this.handleNewLaneModalClose}\r\n                    laneValues={{ title: '' }}\r\n                    updateLaneValues={this.addNewLane}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {...state}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateState: (newState) => dispatch({ type: 'UPDATE_STATE', newState } ),\r\n        addNewLane: (values) => dispatch({ type: 'ADD_NEW_LANE', values })\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(WorkflowBoard);","import { createStore } from 'redux'\r\nimport appReducer from './reducers'\r\n\r\nconst store = createStore(appReducer)\r\n\r\nexport default store","import { v4 as uuidv4 } from 'uuid';\r\nimport * as lodash from 'lodash';\r\n// Use the initialState as a default value\r\nexport default function appReducer(state, action) {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            cards: {\r\n                \r\n            },\r\n            lanes: {\r\n                'lane-1': {\r\n                    id: 'lane-1',\r\n                    title: 'Lane 1 title',\r\n                    cardIds: []\r\n                },\r\n                'lane-2': {\r\n                    id: 'lane-2',\r\n                    title: 'Lane 2 title',\r\n                    cardIds: []\r\n                },\r\n                'lane-3': {\r\n                    id: 'lane-3',\r\n                    title: 'Lane 3 title',\r\n                    cardIds: []\r\n                }\r\n            },\r\n            laneOrder: ['lane-1', 'lane-2', 'lane-3']\r\n        }\r\n    }\r\n\r\n    const createNewCard = (values) => {\r\n        return {\r\n            id: uuidv4(),\r\n            title: values.title,\r\n            content: values.content\r\n        }\r\n    }\r\n\r\n    const createNewLane = (values) => {\r\n        return {\r\n            id: uuidv4(),\r\n            title: values.title,\r\n            cardIds: []\r\n        }\r\n    }\r\n    const deepCopyState = (originalState) => {\r\n        return lodash.cloneDeep(originalState);\r\n    }\r\n\r\n    switch (action.type) {\r\n        case 'UPDATE_CARD':{\r\n            let newState = deepCopyState(state)\r\n            newState.cards[action.updatedCard.id] = { ...action.updatedCard }\r\n            return newState;\r\n        }\r\n            \r\n        case 'UPDATE_LANE':{\r\n            let newState = deepCopyState(state)\r\n            newState.lanes[action.updatedLane.id] = { ...action.updatedLane }\r\n            return newState\r\n        }\r\n            \r\n        case 'UPDATE_STATE':\r\n            return action.newState\r\n        case 'ADD_NEW_CARD':{\r\n            let newCard = createNewCard(action.values);\r\n            let newState = deepCopyState(state)\r\n            newState.cards[newCard.id] = newCard;\r\n            newState.lanes[action.laneId].cardIds.push(newCard.id)\r\n            //saveToServer(newState);\r\n            return newState;\r\n        }\r\n        case 'DELETE_CARD':{\r\n            let newState = deepCopyState(state)\r\n            delete newState.cards[action.cardId];\r\n            let index = newState.lanes[action.laneId].cardIds.indexOf(action.cardId);\r\n            newState.lanes[action.laneId].cardIds.splice(index, 1);\r\n            return newState;\r\n        }\r\n            \r\n        case 'ADD_NEW_LANE':{\r\n            let newState = deepCopyState(state)\r\n            let newLane = createNewLane(action.values)\r\n            newState.lanes[newLane.id] = newLane;\r\n            newState.laneOrder.push(newLane.id);\r\n            return newState;\r\n        }\r\n            \r\n        case 'DELETE_LANE':{\r\n            let newState = deepCopyState(state)\r\n            delete newState.lanes[action.laneId]\r\n            let laneIndex = newState.laneOrder.indexOf(action.laneId);\r\n            newState.laneOrder.splice(laneIndex, 1);\r\n            return newState\r\n        }\r\n            \r\n        default:\r\n            return state;\r\n        }\r\n\r\n}","import React from 'react';\r\nimport CurrencyConverter from './CurrencyConverter';\r\nimport KeyMapper from './KeyMapper';\r\nimport WorkflowBoard from './WorkflowBoard/WorkflowBoard';\r\nimport { Provider } from 'react-redux'\r\nimport store from './Redux/store'\r\n\r\nexport default class Projects extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currencyCalculator: true,\r\n            keyMapper: false,\r\n            workFlowBoard: false\r\n        }\r\n    }\r\n    handleCurrencyCalulator = () => {\r\n        this.setState({\r\n            currencyCalculator: true,\r\n            keyMapper: false,\r\n            workFlowBoard: false\r\n        })\r\n    }\r\n\r\n    handleKeyMapper = () => {\r\n        this.setState({\r\n            currencyCalculator: false,\r\n            keyMapper: true,\r\n            workFlowBoard: false\r\n        })\r\n    }\r\n\r\n    handleWorkFlowBoard = () => {\r\n        this.setState({\r\n            currencyCalculator: false,\r\n            keyMapper: false,\r\n            workFlowBoard: true\r\n        })\r\n    }\r\n    displayActiveProject = () => {\r\n        if (this.state.currencyCalculator){\r\n            return (\r\n                <>\r\n                    <CurrencyConverter/>\r\n                </>\r\n            )\r\n        }\r\n        else if(this.state.keyMapper){\r\n            return (\r\n                <>\r\n                    <KeyMapper/>\r\n                </>\r\n            )\r\n        }\r\n        else if(this.state.workFlowBoard){\r\n            return (\r\n                <>\r\n                    <Provider store={store}>\r\n                        <WorkflowBoard/>\r\n                    </Provider>\r\n                    \r\n                </>\r\n                )\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <>\r\n            <div className=\"tabs is-centered projects\">\r\n                <ul>\r\n                    <li className={this.state.currencyCalculator ? \"is-active\" : \"\"} onClick={this.handleCurrencyCalulator}><a>Currency Calculator</a></li>\r\n                    <li className={this.state.keyMapper ? \"is-active\" : \"\"} onClick={this.handleKeyMapper}><a>Key Mapper</a></li>\r\n                    <li className={this.state.workFlowBoard ? \"is-active\" : \"\"} onClick={this.handleWorkFlowBoard}><a>Work Flow Board</a></li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"is-centered\">\r\n                {this.displayActiveProject()}\r\n            </div>\r\n            \r\n        </>\r\n        )\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/world-with-rings.e9923bff.svg\";","import './App.css';\nimport Projects from './Components/Projects'\nimport globe from'./images/world-with-rings.svg';\nfunction App() {\n  \n  return (\n    <>\n    <div className=\"app columns is-centered\">\n        <div className=\"column\">\n          <div className=\"has-text-centered\">\n            <img className=\"mb-2\" src={globe} alt=\"globe with rings\" width=\"200\"/>\n            <h1 className=\"title mb-2\">Hello World</h1>\n            <h2 className=\"subtitle mt-2 mb-2\">Welcome to my site.  Below are some example react widgets. </h2>\n          </div>\n          <Projects/>\n      </div>\n    </div>\n    <footer className=\"footer\">\n      <a href=\"https://www.vecteezy.com/free-vector/globe\">Globe Vectors by Vecteezy</a>\n    </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}